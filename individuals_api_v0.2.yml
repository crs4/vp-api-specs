openapi: 3.0.1
info:
  title: Virtual platform Beacon API
  x-beaconVersion: v2.0
  description: EJPRD virtual platform data record APIs
  contact:
    email: admin@cafevariome.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: v0.2
servers:
- url: https://rdnexusdev.molgeniscloud.org/cv2/BeaconAPI/
  description: Development server
paths:
  /info:
    get:
      summary: "Get information regarding this beacon."
      tags:
      - Informational Endpoints
      responses:
        200:
          $ref: '#/components/schemas/InfoResponse'
  /filtering_terms:
    get:
      summary: "Get the valid filtering terms to be used in querying/handled by this beacon."
      tags:
      - Informational Endpoints
      responses:
        200:
          $ref: '#/components/schemas/FilteringTermsResponse'
  /map:
    get:
      summary: "Get the list of endpoints included in this beacon i.e., individuals."
      tags:
      - Informational Endpoints
      responses:
        200:
          $ref: '#/components/schemas/MapResponse'
  /service-info:
    get:
      summary: "Get information about the beacon using GA4GH ServiceInfo format."
      tags:
      - Informational Endpoints
      responses:
        200:
          $ref: '#/components/schemas/ServiceInfoResponse'
  /configuration:
    get:
      summary: "Get the configuration of this beacon."
      tags:
      - Informational Endpoints
      responses:
        200:
          $ref: '#/components/schemas/ConfigurationResponse'
  /entry_types:
    get:
      summary: "Get the list of beacon entry types."
      tags:
      - Informational Endpoints
      responses:
        200:
          $ref: '#/components/schemas/EntryTypesResponse'
  /individuals:
    post:
      summary: "Request to retrive count of individuals from a data source (i.e. patients)."
      tags:
      - Query Endpoints
      operationId: individuals_request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndividualRequest'
        required: true
      responses:
        200:
          $ref: '#/components/schemas/IndividualResponse'
        400:
          description: "Input data malformed"
          content: {}
        403:
          description: "The data source does not allow this API call"
          content: {}
      security:
      - apiAuth: []
  /catalogs:
    post:
      summary: "Request to retrive record(s) of resource(s) within a catalog/biobank/registry."
      tags:
      - Query Endpoints
      operationId: catalogs_request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogRequest'
        required: true
      responses:
        200:
          $ref: '#/components/schemas/CatalogResponse'
        400:
          description: "Input data malformed"
          content: {}
        403:
          description: "The data source does not allow this API call"
          content: {}
      security:
      - apiAuth: []
components:
  schemas:
    IndividualRequest:
      required:
      - meta
      - query
      type: object
      properties:
        meta: 
          $ref: '#/components/schemas/MetaContent'
        query:
          $ref: '#/components/schemas/RequestQuery'
      description: "Request to return individuals count for given CDEs as filters"
    CatalogRequest:
      required:
      - meta
      - query
      type: object
      properties:
        meta: 
          $ref: '#/components/schemas/CatalogMetaContent'
        query:
          $ref: '#/components/schemas/CatalogRequestQuery'
      description: "Request to return resources for given CDEs as filters"
    RequestQuery:
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/RequestFilter'
      description: "Input of the query"
    RequestFilter:
      type: array
      items:
        anyOf:
        - $ref: '#/components/schemas/AlphanumericRequestFilter'
        - $ref: '#/components/schemas/OntologyRequestArrayFilter'
    AlphanumericRequestFilter:
      required:
      - id
      - operator
      - value
      type: object
      properties:
        id:
          type: string
          description: >
                  Concept ID of CDEs. 
                    Allowed terms:
                     * `NCIT_C28421` - Sex
                     * `data_2295` - Causative Gene(s)
                     * `NCIT_C83164` - Age this year
                     * `NCIT_C124353` - Symptom Onset
                     * `NCIT_C156420` - Age at diagnosis
          example: "NCIT_C28421"
        operator:
          type: string
          description: |
            This is an advance filter option to include comparison operators in the query. 
              * For `alphanumeric filter`, only `'='` is allowed. 
              * For `numeric filter`, `'=,>,>=,<,<='` are allowed.
          example: "="
        value:
          anyOf:
          - $ref: '#/components/schemas/StringValue'
          - $ref: '#/components/schemas/ArrayValues'
      description: "Query parameters to filter individuals based on CDEs."
    StringValue:
      type: string
      example: "\"NCIT_C17998\""
      description: |
                The actual value of the CDE in string format. Allowed values:
                  * For `NCIT_C28421`(Sex): 
                    * `NCIT_C16576`, (Female)
                    * `NCIT_C20197`, (Male)
                    * `NCIT_C124294`, (Undetermined)
                    * `NCIT_C17998` (Unknown)
                      * Ex: \"NCIT_C16576\"
                  * For `data_2295`(Causative Gene): 
                    * Any HGNC Gene symbol or an array of HGNC Symbols. 
                      * Ex: \"FOXRED1\"
                  * For `NCIT_C83164`(Age this year): 
                    * Any age as an integer
                      * Ex: 13
                  * For `NCIT_C124353`(Symptom Onset): 
                    * Any integer
                      * Ex: 5
                  * For `NCIT_C156420`(Age at diagnosis):
                    * Any integer
                      * Ex: 8
    ArrayValues:
      type: array
      items:
        type: string
      example: "[\"NCIT_C16576\",\"NCIT_C20197\"]"  
      description: |
        An array of allowed CDE value(s) in string format.
    OntologyRequestArrayFilter:
      required:
      - id
      type: object
      properties:
        id:
          anyOf:
          - type: string
          - type: array
            items:
              type: string
            description: "Array of string orpha ids."
          example: "\"Orphanet_558\" or [\"Orphanet_558\",\"Orphanet_773\",\"Orphanet_12345\"]"
          description: |
                    Concept ID of CDEs using Orpha ontology format. 
                      Allowed values:
                      * For `Disease or Disorder`: A single value or an array of orphanet terms. e.g. \"Orphanet_558\" or [\"Orphanet_558\", \"Orphanet_773\"]
    CatalogRequestQuery:
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/CatalogRequestFilter'
      description: "Input of the query"
    CatalogRequestFilter:
      type: array
      items:
        anyOf:
        - $ref: '#/components/schemas/CatalogAlphanumericRequestFilter'
        - $ref: '#/components/schemas/OntologyRequestArrayFilter'
    CatalogAlphanumericRequestFilter:
      required:
      - id
      - operator
      - value
      type: object
      properties:
        id:
          type: string
          description: >
                  Concept ID of CDEs. 
                    Allowed terms:
                     * `ID` => `id`
                     * `Name` => `name`
                     * `Description` => `description`
                     * `Organisation` => `organisation`
                     * `Resource Types` => `resourceTypes`
                     * `Country` => `country`
          example: "resourceTypes"
        operator:
          type: string
          description: "This is an advanced filter option to compare filter IDs with filter values using '=' operator in the query."
          example: "="
        value:
          anyOf:
          - $ref: '#/components/schemas/CatalogStringValue'
          - $ref: '#/components/schemas/CatalogArrayValues'
          description: "Query parameters to filter individuals based on CDEs."    
    CatalogStringValue:
      type: string
      example: "BiobankDataset"
      description: |
                The actual value of the CDE in string format. Allowed values:
                  * For `id`: any identifier of the resource as a string.
                  * For `name`: name of the resource as a string.
                  *  For `description`: description of the resource as a string.
                    * Note that you can also use wildcards. Ex: %genome comparison% returns list of records with description matching to genome comparison.
                  * For `organisation`: organisation name of the resource as a string.
                  * For `resourceTypes`: any one of the following string values are allowed - 
                    * PatientRegistryDataset, 
                    * BiobankDataset,
                    * KnowledgeBase
                  * For `country`: ISO 3166-1 alpha-2 format string (e.g. IT, FR, NL)
    CatalogArrayValues:
      type: array
      items:
        type: string
      example: "[PatientRegistryDataset, BiobankDataset]"  
      description: |
                The actual value of the CDE in string format. The only allowed id with array values for this version is `resourceTypes`.
                * For `resourceTypes`: any/all of the following string values in an array are allowed - 
                    * PatientRegistryDataset, 
                    * BiobankDataset,
                    * KnowledgeBase
    InfoResponse:
      required:
      - meta
      - response
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaContent'
        response:
          $ref: '#/components/schemas/InfoResponseContent'
      description: |
        Respond with information regarding this Beacon.
    FilteringTermsResponse:
      required:
      - meta
      - response
      properties:
        meta:
          $ref: '#/components/schemas/MetaContent'
        response:
          $ref: '#/components/schemas/FilterTermsResponseContent'
    FilterTermsResponseContent:
      required:
      - filteringTerms
      properties:
        filteringTerms:
          $ref: '#/components/schemas/FilterTermsResponse'
    FilterTermsResponse:
      description: |
        List of filtering terms for querying this Beacon.
      required: 
      - id
      - type
      type: object
      properties:
        id:
          type: string
          description: |
            The field id in the case of numeric or alphanumeric fields, or the term id in the case of ontology or custom terms. CURIE syntax in the case of an ontology term.
          example: NCIT_C28421
        type: 
          type: string
          description: |
            Either "custom", "alphanumeric" or ontology/terminology full name.
          example: alphanumeric or ontology or custom
        label:
          type: string
          description: |
            This would be the "preferred Label" in the case of an ontology term.
          example: Symptom Onset
    ServiceInfoResponse:
      description: |
        Respond with the Service Info of this Beacon.
    MapResponse:
      description: |
        Respond with the list of available query endpoints in this Beacon.
    EntryTypesResponse:
      required:
      - meta
      - response
      type: object
      properties: 
        meta:
          $ref: '#/components/schemas/MetaContent'
        response:
          $ref: '#/components/schemas/ETResponseContent'
      description: |
        Respond with the entry types available  in this Beacon Implementation.
    ConfigurationResponse:
      description: |
        Respond with this Beacon's configuration information.
    MetaContent:
      description: |
        Information about the response that could be relevant for the Beacon client in order to interpret the results.
      required: 
      - apiVersion
      type: object
      properties: 
        apiVersion:
          type: string
          description: |
            Version of the API.
          example: v2.0
        beaconId:
          type: string
          description: |
            Identifier of the beacon, as defined in Beacon, in reverse domain name notation.
          example: BeaconAPI.cv2.rdnexusdev.molgeniscloud.org
        returnedSchemas:
          type: object
          description: |
            Set of schemas to be used in the response to a request.
          properties:
            entityType:
              type: string
            schema:
              type: string
    CatalogMetaContent:
      description: |
        Information about the response that could be relevant for the Beacon client in order to interpret the results.
      required: 
      - apiVersion
      type: object
      properties: 
        apiVersion:
          type: string
          description: |
            Version of the API.
          example: v2.0
        beaconId:
          type: string
          description: |
            Identifier of the beacon, as defined in Beacon, in reverse domain name notation.
          example: BeaconAPI.cv2.rdnexusdev.molgeniscloud.org
        returnedSchemas:
          type: object
          description: |
            (Optional) Set of schemas to be used in the response to a request.
          properties:
            entityType:
              type: string
            schema:
              type: string
    IndividualsMetaResponseContent:
      description: |
        Information about the response that could be relevant for the Beacon client in order to interpret the results.
      required: 
      - apiVersion
      - beaconId
      - returnedGranularity
      type: object
      properties: 
        apiVersion:
          type: string
          description: |
            Version of the API.
          example: v2.0
        beaconId:
          type: string
          description: |
            Identifier of the beacon, as defined in Beacon, in reverse domain name notation.
          example: BeaconAPI.cv2.rdnexusdev.molgeniscloud.org
        receivedRequestSummary:
          required:
          - apiVersion
          - requestedGranularity
          - requestedSchemas
          type: object
          description: |
            Section of the response that summarize the request with the following fields received as its been interpreted by the Beacon server. This could also just return the complete Beacon request made by the user.
          properties: 
            apiVersion:
              type: string
            filters:
              type: object
              description: |
                Filters as submitted in the request.
              $ref: '#/components/schemas/RequestFilter'
            requestedGranularity: 
              type: string
              example: boolean, count, aggregated, record
              default: count
            requestedSchemas:
              type: object
              description: |
                Set of schemas to be used in the response to a request.
              properties:
                entityType:
                  type: string
                schema:
                  type: string
        returnedGranularity: 
              type: string
              example: boolean, count, aggregated, record
              default: count
        returnedSchemas:
          type: object
          description: |
            Set of schemas to be used in the response to a request.
          properties:
            entityType:
              type: string
            schema:
              type: string
    InfoResponseContent:
      description: |
        Metadata describing a Beacon instance.
      required:
      - apiVersion
      - environment
      - id
      - name
      - organisation
      properties:
        apiVersion:
          type: string
          description: |
            Version of the API provided by the Beacon. 
          example: v2.0
        environment:
          type: string
          description: |
            Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Allowed: prod, test, dev, staging
          example: dev
        id:
          type: string
          description: |
            Unique identifier of the Beacon. Use reverse domain name notation.
        name:
          type: string
          description: |
            Name of the Beacon. 
        organisation:
          type: object
          description: |
            Organization owning the Beacon.
          required:
          - id
          - name
          properties: 
            id:
              type: string
              description: |
                Unique identifier of the organization.
            name:
              type: string
              description: |
                Name of the organization.
    ETResponseContent:
      required: 
      - entryTypes
      type: object
      properties:
        entryTypes:
          required:
          - Individuals
          type: object
          description: |
            List of entry types. 
          properties:
            Individuals:
              description: |
                Definition of an element or entry type including the Beacon v2 required and suggested attributes. This schema purpose is to describe each type of entities included in this beacon, hence Beacon clients could have some metadata about such entities.
              required: 
              - defaultSchema
              - id
              - name
              - ontologyTermForThisType
              - partOfSpecification
              type: object
              properties: 
                defaultSchema:
                  description: |
                    Definition of an annotated URL address or a file reference.
                  required:
                    - id
                    - name
                    - referenceToSchemaDefinition
                  properties:
                    id:
                      type: string
                      description: |
                        A (unique) identifier of the element.
                      example: Individuals
                    name:
                      type: string
                      description: |
                        A distinctive name for the element.
                      example: Individuals
                    referenceToSchemaDefinition:
                      type: string
                      description: |
                        Conforming Schema of the element.
                      example: https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2-Models/main/BEACON-V2-draft4-Model/individuals/defaultSchema.json
                id:
                  description: |
                    A unique identifier of the element.
                  type: string
                  example: Individuals
                name: 
                  description: |
                    A distinctive name for the element.
                  type: string
                  example: Individuals
                ontologyTermForThisType: 
                  description: |
                    Definition of an ontology term.
                  type: object
                  required:
                  - id
                  properties: 
                    id: 
                      description: |
                        A CURIE identifier as `id` for ontology term.
                      example: NCIT:C25190
                      type: string
                partOfSpecification:
                  description: |
                    This label is to group together entry types that are part of the same specification.
                  type: string
                  example: Beacon v2.0
      description: |
        Respond with a list of entry types conforming to Beacon v2 spec.
    IndividualResponse:
      description: |
        Response of a query over individuals counts.
      required:
      - meta
      - response
      - responseSummary
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/IndividualsMetaResponseContent'
        response:
          required:
          - resultSets
          properties:
            resultSets:
                $ref: '#/components/schemas/IndividualsResults'
        responseSummary:
          $ref: '#/components/schemas/IndividualResponseContent'
        info:
          description: | 
            Beacon only responds with this info object if there are any unsupported filters in the query.
          $ref: '#/components/schemas/WarningResponse'
    CatalogResponse:
      description: |
        Response of a query over records of catalogs.
      required:
      - meta
      - responseSummary
      - response
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/CatalogsMetaResponseContent'
        responseSummary:
          $ref: '#/components/schemas/CatalogsResponseSummaryContent'
        response:
          $ref: '#/components/schemas/CatalogsResponseContent'
        info:
          description: | 
            Beacon only responds with this info object if there are any unsupported filters in the query.
          $ref: '#/components/schemas/WarningResponse'
    CatalogsMetaResponseContent:
      description: |
        Information about the response that could be relevant for the Beacon client in order to interpret the results.
      required: 
      - apiVersion
      - beaconId
      - returnedGranularity
      type: object
      properties: 
        apiVersion:
          type: string
          description: |
            Version of the API.
          example: v2.0
        beaconId:
          type: string
          description: |
            Identifier of the beacon, as defined in Beacon, in reverse domain name notation.
          example: BeaconAPI.cv2.rdnexusdev.molgeniscloud.org
        receivedRequestSummary:
          required:
          - apiVersion
          - requestedGranularity
          - requestedSchemas
          type: object
          description: |
            Section of the response that summarize the request with the following fields received as its been interpreted by the Beacon server. This could also just return the complete Beacon request made by the user.
          properties: 
            apiVersion:
              type: string
            filters:
              type: object
              description: |
                Filters as submitted in the request.
              $ref: '#/components/schemas/RequestFilter'
            requestedGranularity: 
              type: string
              example: boolean, count, aggregated, record
              default: count
            requestedSchemas:
              type: object
              description: |
                Set of schemas to be used in the response to a request.
              properties:
                entityType:
                  type: string
                schema:
                  type: string
        returnedGranularity: 
              type: string
              example: boolean, count, aggregated, record
              default: count
        returnedSchemas:
          type: object
          description: |
            Set of schemas to be used in the response to a request.
          properties:
            entityType:
              type: string
            schema:
              type: string
    WarningResponse:
      description: |
        When an implementation is responding with a partial query match, this section lets the requestor know if any filter(s)/value(s) are not applied to the query.
      required: 
      - warnings
      type: object
      properties:
        warnings:
          required:
            - unsupportedFilters
          type: object
          properties:
            unsupportedFilters:
              type: array
              items:
                type: string
                description: |
                  In an array of strings, any filter(s) that are unsupported by an implementation go here.
                example: "\"data_2295\""
            unsupportedFilterValues:
              type: array
              items:
                type: string
                description: |
                  If an implementation does not support a filter value, let's say, for example, 'NCIT_C124294'(Undetermined) Sex, this unsupported value goes here as a string, and will be ignored while a partial query is performed with other supported filter(s) from the request body (if any).
                example: "\"NCIT_C124294\",\"NCIT_C179980\""
          description: |
              Respond with a list of (comma-separated) unsupported filter(s).
          example: |
              {
              unsupportedFilters: ["NCIT_C156420"], 
              
              unsupportedFilterValues:["NCIT_C124294"]
              }
    IndividualResponseContent:
      required:
      - exists
      - numTotalResults
      type: object
      properties:
        exists:
          type: boolean
          description: |
            Indicator of whether any individual was observed in the
            data source for the given query with CDEs parameter. This should be non-null, unless there was an error, in which case `error` has to be non-null.
        numTotalResults:
          type: integer
          description: |
            Response of the query indicating if the query yield any results. If the query is successful then the count will be returned as a response.
    CatalogsResponseSummaryContent:
      required:
      - exists
      - numTotalResults
      type: object
      properties:
        exists:
          type: boolean
          description: |
            Indicator of whether any catalog was observed in the
            data source for the given query with CDEs filters. This should be non-null, unless there was an error, in which case `error` has to be non-null.
        numTotalResults:
          type: integer
      description: |
        Response of the query indicating if the query yield any results. If the query is successful then the count will be returned as a response.
    CatalogsResponseContent:
      required:
      - resultSets
      type: array
      items: 
        $ref: '#/components/schemas/ResultsetsResponseContent'
    ResultsetsResponseContent:
      required: 
        - id
        - setType
        - exists
        - resultsCount
        - results
      type: object
      properties:
        id:
          type: string
          description: |
            id of the resultset
          example: "catalogA0123"
        setType:
          type: string
          description: |
              Entry type of resultset. It SHOULD MATCH an entry type declared in the Beacon configuration.
          example: "catalog"
        exists:
          type: boolean
          description: |
            Indicator of whether any catalog was observed in the
            data source for the given query with CDEs filters. This should be non-null, unless there was an error, in which case `error` has to be non-null.
        resultsCount:
          type: integer
          description: |
            Number of results in this Resultset.
        results:
          description: |
              Array set of the records matching with the query.
          type: array
          items:
            $ref: '#/components/schemas/CatalogsResults'
        resultsHandover:
          description: |
              Handover to the resultant record page, if any. 
    IndividualsResults: 
      type: array
      items:
        type: object
        required:
        - id
        - type
        - exists
        - resultCount
        properties:
          id:
            type: string
            description: |
              id of the result
            example: "result0123"
          type:
            type: string
            description: |
                Type of result
            example: "Dataset"
          exists:
            type: boolean
            description: |
              Whether the results exists or not.
          resultCount:
            type: integer
            description: |
              Count of result, either exact or higher range of result. If employing ranges, 'info' attributre is required.
          info:
            required:
            - resultCountDescription
            - contactPoint
            - contactEmail
            - contactURL
            type: object
            properties:
                resultCountDescription:
                  required:
                  - minRange
                  - maxRange
                  description: |
                      Contains minRange and maxRange of resultant set.
                  type: object
                  properties:
                    minRange:
                      type: integer
                      description: |
                        Value of minimum range employed.
                    maxRange:
                      type: integer
                      description: |
                        Value of maximum range employed.
                contactPoint:
                  type: string
                  description: |
                    Contact person for this resource.
                contactEmail:
                  type: string
                  description: |
                    Contact email for this resource.
                contactURL:
                  type: string
                  description: |
                    Contact URL for this resource.
    CatalogsResults: 
      required:
      - id
      - name
      - description
      - externalUrl
      - resourceTypes
      - organisation
      type: object
      properties:
        id:
          type: string
          description: |
            id of the result
          example: "catalogA0123"
        name:
          type: string
          description: |
              Name
          example: "catalog"
        description:
          type: string
          description: |
            Description of result.
        externalUrl:
          type: string
          description: |
            URL to reach result.
        resourceTypes:
          description: |
              Type of the resource.
          type: string
        organisation:
          description: |
              Organisation name/type.
          type: string
  securitySchemes:
    apiAuth:
      type: apiKey
      in: header
      name: auth-key
